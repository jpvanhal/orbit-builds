{"version":3,"sources":["iife-start.js","assets/globalized-loader.js","orbit-common/local-forage-source.js","globalize-orbit-common-local-forage.js","iife-stop.js"],"sourcesContent":["(function() {\n","// Share loader properties from globalized Orbit package\nvar define = window.Orbit.__define__;\nvar requireModule = window.Orbit.__requireModule__;\n","define('orbit-common/local-forage-source', ['exports', 'orbit/main', 'orbit/lib/assert', 'orbit/lib/objects', 'orbit-common/memory-source'], function (exports, Orbit, assert, objects, MemorySource) {\n\n  'use strict';\n\n  var supportsLocalStorage = function() {\n    try {\n      return 'localStorage' in window && window['localStorage'] !== null;\n    } catch(e) {\n      return false;\n    }\n  };\n\n  /**\n   Source for storing data with local forage (https://github.com/mozilla/localForage)\n\n   @class LocalForageSource\n   @extends MemorySource\n   @namespace OC\n   @param {OC.Schema} schema\n   @param {Object}    [options]\n   @constructor\n   */\n  var LocalForageSource = MemorySource['default'].extend({\n    init: function(schema, options) {\n      var _this = this;\n\n      assert.assert('Your browser does not support local storage!', supportsLocalStorage()); //needed as final fallback\n      assert.assert('No valid local forage object given', options['localforage'] !== undefined);\n      assert.assert('Local forage requires Orbit.Promise be defined', Orbit['default'].Promise);\n\n      this._super.apply(this, arguments);\n\n      options = options || {};\n      this.saveDataCallback = options['saveDataCallback'];\n      this.loadDataCallback = options['loadDataCallback'];\n      this.namespace = options['namespace'] || 'orbit'; // local storage key\n      this._autosave = options['autosave'] !== undefined ? options['autosave'] : true;\n      this.webSQLSize = options['webSQLSize'] !== undefined ? options['webSQLSize'] : 4980736;\n      var autoload = options['autoload'] !== undefined ? options['autoload'] : true;\n      this.localforage = options['localforage'];\n\n      this.localforage.config({\n        name        : 'orbitjs',\n        version     : 1.0,\n        size        : this.webSQLSize,\n        storeName   : this.namespace,\n        description : 'orbitjs localforage adapter'\n      });\n\n      this._isDirty = false;\n\n      this.on('didTransform', function(operation) {\n        return this._saveData(operation).then(function() {\n          if (options.saveDataCallback) setTimeout(_this.saveDataCallback, 0);\n        });\n      }, this);\n\n      if (autoload) this.load().then(function() {\n        if (options.loadDataCallback) setTimeout(options.callback, 0);\n      });\n    },\n\n    load: function() {\n      var _this = this;\n      return _this.localforage.keys().then(function(keys) {\n        if (keys.length === 0) {\n          _this.reset(_this.retrieve());\n        }\n\n        return new Orbit['default'].Promise.all(keys.filter(hasNamespace).map(keyToPromise));\n\n        function hasNamespace(key) {\n          return key.indexOf(_this.namespace + '/') === 0;\n        }\n\n        function keyToPromise(key) {\n          return _this.localforage.getItem(key).then(saveToCache.bind(_this, key));\n        }\n\n        function saveToCache(key, object) {\n          var path = key.split('/');\n          _this._cache._doc._data[path[1]][path[2]] = object;\n        }\n      });\n    },\n\n    enableAutosave: function() {\n      if (!this._autosave) {\n        this._autosave = true;\n        if (this._isDirty) this._saveData();\n      }\n    },\n\n    disableAutosave: function() {\n      if (this._autosave) {\n        this._autosave = false;\n      }\n    },\n\n    /////////////////////////////////////////////////////////////////////////////\n    // Internals\n    /////////////////////////////////////////////////////////////////////////////\n\n    _saveData: function(operation) {\n      var _this = this; //bind not supported in older browsers\n      var key = [this.namespace, operation.path[0], operation.path[1]].join('/');\n      var data = this.retrieve([operation.path[0], operation.path[1]]);\n      return this.localforage.setItem(key, data).then(function() {\n        _this._isDirty = false;\n      });\n    }\n  });\n\n  exports['default'] = LocalForageSource;\n\n});","window.OC.LocalForageSource = requireModule(\"orbit-common/local-forage-source\")[\"default\"];\n","})();\n"],"names":[],"mappingslHA;;ACAA;","file":"orbit-common-local-forage.js"}