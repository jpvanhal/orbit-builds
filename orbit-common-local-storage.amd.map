{"version":3,"sources":["orbit-common/local-storage-source.js"],"sourcesContent":["define('orbit-common/local-storage-source', ['exports', 'orbit/lib/assert', 'orbit-common/memory-source'], function (exports, assert, MemorySource) {\n\n  'use strict';\n\n  var supportsLocalStorage = function() {\n    try {\n      return 'localStorage' in window && window['localStorage'] !== null;\n    } catch(e) {\n      return false;\n    }\n  };\n\n  /**\n   Source for storing data in local storage\n\n   @class LocalStorageSource\n   @extends MemorySource\n   @namespace OC\n   @param {OC.Schema} schema\n   @param {Object}    [options]\n   @constructor\n   */\n  var LocalStorageSource = MemorySource['default'].extend({\n    init: function(schema, options) {\n      assert.assert('Your browser does not support local storage!', supportsLocalStorage());\n\n      this._super.apply(this, arguments);\n\n      options = options || {};\n      this.namespace = options['namespace'] || 'orbit'; // local storage namespace\n      this.delimeter = options['delimeter'] || '/'; // local storage key\n      this._autosave = options['autosave'] !== undefined ? options['autosave'] : true;\n      var autoload = options['autoload'] !== undefined ? options['autoload'] : true;\n\n      this._isDirty = false;\n\n      this.on('didTransform', this._saveData, this);\n\n      if (autoload) this.load();\n    },\n\n    load: function() {\n      for (var key in window.localStorage) {\n        if (key.indexOf(this.namespace) === 0) {\n          var path = key.split(this.delimeter);\n          var item = JSON.parse(window.localStorage[key]);\n          this._cache._doc._data[path[1]][path[2]] = item;\n        }\n      }\n    },\n\n    enableAutosave: function() {\n      if (!this._autosave) {\n        this._autosave = true;\n        if (this._isDirty) this._saveData();\n      }\n    },\n\n    disableAutosave: function() {\n      if (this._autosave) {\n        this._autosave = false;\n      }\n    },\n\n    getKey: function(path) {\n      return [this.namespace, path[0], path[1]].join(this.delimeter);\n    },\n\n\n    /////////////////////////////////////////////////////////////////////////////\n    // Internals\n    /////////////////////////////////////////////////////////////////////////////\n\n    _saveData: function(operation) {\n      if (!this._autosave && !operation) {\n        this._isDirty = true;\n        return;\n      }\n      var obj = this.retrieve([operation.path[0], operation.path[1]]);\n\n      if (operation.op === 'add' || operation.op === 'replace') {\n        window.localStorage[this.getKey(operation.path)] = JSON.stringify(obj);\n      }\n      if (operation.op === 'remove') {\n        delete window.localStorage[this.getKey(operation.path)];\n      }\n      this._isDirty = false;\n    }\n  });\n\n  exports['default'] = LocalStorageSource;\n\n});"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"orbit-common-local-storage.amd.js"}