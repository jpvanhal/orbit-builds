{"version":3,"sources":["iife-start.js","assets/globalized-loader.js","orbit-common/jsonapi-serializer.js","orbit-common/jsonapi-source.js","globalize-orbit-common-jsonapi.js","iife-stop.js"],"sourcesContent":["(function() {\n","// Share loader properties from globalized Orbit package\nvar define = window.Orbit.__define__;\nvar requireModule = window.Orbit.__requireModule__;\n","define('orbit-common/jsonapi-serializer', ['exports', 'orbit-common/serializer', 'orbit/lib/objects', 'orbit/lib/strings'], function (exports, Serializer, objects, strings) {\n\n  'use strict';\n\n  exports['default'] = Serializer['default'].extend({\n    resourceKey: function(type) {\n      return 'id';\n    },\n\n    resourceType: function(type) {\n      return strings.dasherize( this.schema.pluralize(type) );\n    },\n\n    resourceLink: function(type, link) {\n      return strings.dasherize( link );\n    },\n\n    resourceAttr: function(type, attr) {\n      return strings.dasherize( attr );\n    },\n\n    typeFromResourceType: function(resourceType) {\n      return strings.camelize( this.schema.singularize(resourceType) );\n    },\n\n    attrFromResourceAttr: function(type, resourceAttr) {\n      return strings.camelize( resourceAttr );\n    },\n\n    linkFromResourceLink: function(type, resourceLink) {\n      return strings.camelize( resourceLink );\n    },\n\n    resourceId: function(type, id) {\n      if (objects.isArray(id)) {\n        var ids = [];\n        for (var i = 0, l = id.length; i < l; i++) {\n          ids.push(this.resourceId(type, id[i]));\n        }\n\n        return ids;\n      }\n\n      var primaryKey = this.schema.modelDefinition(type).primaryKey.name;\n      var resourceKey = this.resourceKey(type);\n\n      if (objects.isObject(id)) {\n        if (id[resourceKey]) {\n          return id[resourceKey];\n        }\n        id = id[primaryKey];\n      }\n\n      if (resourceKey === primaryKey) {\n        return id;\n      } else {\n        return this.schema.primaryToSecondaryKey(type, resourceKey, id);\n      }\n    },\n\n    idFromResourceId: function(type, resourceId) {\n      var primaryKey = this.schema.modelDefinition(type).primaryKey;\n      var pk = primaryKey.name;\n      var rk = this.resourceKey(type);\n\n      if (resourceId !== null && typeof resourceId === 'object') {\n        if (resourceId[pk]) {\n          return resourceId[pk];\n        }\n        resourceId = resourceId[rk];\n      }\n\n      var id;\n\n      if (rk === pk) {\n        id = resourceId;\n      } else {\n        id = this.schema.secondaryToPrimaryKey(type, rk, resourceId, true);\n      }\n\n      return id;\n    },\n\n    serialize: function(type, records) {\n      var json = {};\n\n      if (objects.isArray(records)) {\n        json.data = this.serializeRecords(type, records);\n      } else {\n        json.data = this.serializeRecord(type, records);\n      }\n\n      return json;\n    },\n\n    serializeRecords: function(type, records) {\n      var json = [];\n\n      records.forEach(function(record) {\n        json.push(this.serializeRecord(type, record));\n      }, this);\n\n      return json;\n    },\n\n    serializeRecord: function(type, record) {\n      var json = {};\n\n      this.serializeId(type, record, json);\n      this.serializeType(type, record, json);\n      this.serializeAttributes(type, record, json);\n      this.serializeLinks(type, record, json);\n\n      return json;\n    },\n\n    serializeId: function(type, record, json) {\n      var value = this.resourceId(type, record);\n      if (value !== undefined) {\n        json.id = value;\n      }\n    },\n\n    serializeType: function(type, record, json) {\n      json.type = this.resourceType(type);\n    },\n\n    serializeAttributes: function(type, record, json) {\n      var modelDef = this.schema.modelDefinition(type);\n\n      Object.keys(modelDef.attributes).forEach(function(attr) {\n        this.serializeAttribute(type, record, attr, json);\n      }, this);\n    },\n\n    serializeAttribute: function(type, record, attr, json) {\n      var value = record[attr];\n      if (value !== undefined) {\n        if (json.attributes === undefined) {\n          json.attributes = {};\n        }\n\n        json.attributes[this.resourceAttr(type, attr)] = value;\n      }\n    },\n\n    serializeLinks: function(type, record, json) {\n      var modelDef = this.schema.modelDefinition(type);\n      var linkNames = Object.keys(modelDef.links);\n\n      if (record.__rel) {\n        Object.keys(record.__rel).forEach(function (link) {\n          var linkDef = modelDef.links[link];\n          var value = record.__rel[link];\n\n          if (linkDef.type === 'hasMany') {\n            value = Object.keys(value).map(function(id) {\n              return this.serializeRelationshipIdentifier(linkDef.model, id);\n            }, this);\n          } else if (value) {\n            value = this.serializeRelationshipIdentifier(linkDef.model, value);\n          } else {\n            value = null;\n          }\n\n          json.relationships = json.relationships || {};\n          json.relationships[link] = {\n            data: value\n          };\n\n        }, this);\n      }\n    },\n\n    serializeRelationshipIdentifier: function(type, id) {\n      return {\n        type: this.resourceType(type),\n        id: this.resourceId(type, id)\n      };\n    },\n\n    deserialize: function(type, id, data) {\n      var records = {};\n\n      if (objects.isArray(data.data)) {\n        records.primary = this.deserializeRecords(type, id, data.data);\n      } else {\n        records.primary = this.deserializeRecord(type, id, data.data);\n      }\n\n      if (data.included) {\n        records.included = {};\n\n        data.included.forEach(function(recordData) {\n          var recordType = this.typeFromResourceType(recordData.type);\n          if (records.included[recordType] === undefined) {\n            records.included[recordType] = [];\n          }\n          records.included[recordType].push(this.deserializeRecord(recordType, null, recordData));\n        }, this);\n      }\n\n      this.assignLinks(type, records);\n\n      return records;\n    },\n\n    deserializeLink: function(data) {\n      if (objects.isObject(data)) {\n        if (objects.isArray(data)) {\n          return data.map(function(linkData) {\n            return this.deserializeRelationshipIdentifier(linkData);\n          }, this);\n        } else {\n          return this.deserializeRelationshipIdentifier(data);\n        }\n\n      } else {\n        return data;\n      }\n    },\n\n    deserializeRelationshipIdentifier: function(data) {\n      var type = this.typeFromResourceType(data.type);\n      return {\n        type: type,\n        id: this.idFromResourceId(type, data.id)\n      };\n    },\n\n    deserializeRecords: function(type, ids, data) {\n      return data.map(function(recordData, i) {\n        var id = ids && ids[i] ? ids[i] : null;\n        return this.deserializeRecord(type, id, recordData);\n      }, this);\n    },\n\n    deserializeRecord: function(type, id, data) {\n      var record = {};\n      var attributes;\n      var relationships;\n      var pk = this.schema.modelDefinition(type).primaryKey.name;\n\n      if (id) {\n        record[pk] = id;\n      }\n\n      this.deserializeKey(type, record, this.resourceKey(type), data.id);\n\n      if (data.attributes) {\n        attributes = data.attributes;\n        this.deserializeAttributes(type, record, attributes);\n      }\n\n      if (data.relationships) {\n        // temporarily assign relationships as __relationships\n        record.__relationships = data.relationships;\n      }\n\n      return this.schema.normalize(type, record);\n    },\n\n    deserializeKey: function(type, record, key, value) {\n      record[key] = value;\n    },\n\n    deserializeAttributes: function(type, record, json) {\n      var modelDef = this.schema.modelDefinition(type);\n      Object.keys(modelDef.attributes).forEach(function(attr) {\n        var resourceAttr = this.resourceAttr(type, attr);\n        var value = json[resourceAttr];\n        if (value !== undefined) {\n          this.deserializeAttribute(type, record, attr, value);\n        }\n      }, this);\n    },\n\n    deserializeAttribute: function(type, record, attr, value) {\n      record[attr] = value;\n    },\n\n    assignLinks: function(type, records) {\n      if (objects.isArray(records.primary)) {\n        this.assignLinksToRecords(type, records.primary);\n      } else {\n        this.assignLinksToRecord(type, records.primary);\n      }\n\n      if (records.included) {\n        Object.keys(records.included).forEach(function(includedType) {\n          this.assignLinksToRecords(includedType, records.included[includedType]);\n        }, this);\n      }\n    },\n\n    assignLinksToRecords: function(type, records) {\n      records.forEach(function(record) {\n        this.assignLinksToRecord(type, record);\n      }, this);\n    },\n\n    assignLinksToRecord: function(type, record) {\n      if (record.__relationships) {\n        var schema = this.schema;\n        var linkDef;\n        var linkValue;\n        var id;\n\n        Object.keys(record.__relationships).forEach(function(link) {\n          linkValue = record.__relationships[link].data;\n          linkDef = schema.modelDefinition(type).links[link];\n\n          if (!linkDef) return;\n\n          if (linkDef.type === 'hasMany' && objects.isArray(linkValue)) {\n            record.__rel[link] = record.__rel[link] || [];\n\n            var rels = record.__rel[link];\n            linkValue.forEach(function(resourceId) {\n              id = this.idFromResourceId(linkDef.model, resourceId.id);\n              record.__rel[link][id] = true;\n            }, this);\n\n          } else if (linkDef.type === 'hasOne' && objects.isObject(linkValue)) {\n            id = this.idFromResourceId(linkDef.model, linkValue.id);\n            record.__rel[link] = id;\n\n          }\n\n        }, this);\n\n        delete record.__relationships;\n      }\n    }\n  });\n\n});","define('orbit-common/jsonapi-source', ['exports', 'orbit/main', 'orbit/lib/assert', 'orbit/lib/exceptions', 'orbit/lib/objects', 'orbit/operation', 'orbit/action-queue', 'orbit-common/source', 'orbit-common/serializer', 'orbit-common/jsonapi-serializer', 'orbit-common/lib/exceptions', 'orbit/transform-result', 'orbit-common/operation-processors/cache-integrity-processor', 'orbit-common/operation-processors/deletion-tracking-processor', 'orbit-common/operation-processors/schema-consistency-processor'], function (exports, Orbit, assert, exceptions, objects, Operation, ActionQueue, Source, Serializer, JSONAPISerializer, lib__exceptions, TransformResult, CacheIntegrityProcessor, DeletionTrackingProcessor, SchemaConsistencyProcessor) {\n\n  'use strict';\n\n  exports['default'] = Source['default'].extend({\n\n    init: function(options) {\n      assert.assert('JSONAPISource constructor requires `options`', options);\n      assert.assert('JSONAPISource requires Orbit.Promise be defined', Orbit['default'].Promise);\n      assert.assert('JSONAPISource requires Orbit.ajax be defined', Orbit['default'].ajax);\n\n      options.useCache = options.useCache !== undefined ? options.useCache : true;\n      if (options.useCache) {\n        options.cacheOptions = options.cacheOptions || {};\n        options.cacheOptions.processors =  options.cacheOptions.processors || [SchemaConsistencyProcessor['default'], CacheIntegrityProcessor['default'], DeletionTrackingProcessor['default']];\n      }\n\n      this._super.call(this, options);\n\n      this.namespace        = options.namespace || this.namespace;\n      this.host             = options.host || this.host;\n      this.headers          = options.headers || this.headers;\n      this.SerializerClass  = options.SerializerClass || this.SerializerClass;\n\n      // If `SerializerClass` is obtained through the _super chain, dereference\n      // its wrapped function, which will be the constructor.\n      //\n      // Note: This is only necessary when retrieving a *constructor* from a\n      //       class hierarchy. Otherwise, `superWrapper` \"just works\".\n      if (this.SerializerClass && this.SerializerClass.wrappedFunction) {\n        this.SerializerClass = this.SerializerClass.wrappedFunction;\n      }\n\n      this.serializer = new this.SerializerClass(this.schema);\n\n      assert.assert('Serializer must be an instance of OC.Serializer', this.serializer instanceof Serializer['default']);\n    },\n\n    namespace: null,\n    host: null,\n    headers: null,\n    SerializerClass: JSONAPISerializer['default'],\n\n    /////////////////////////////////////////////////////////////////////////////\n    // Transformable interface implementation\n    /////////////////////////////////////////////////////////////////////////////\n\n    _transform: function(ops) {\n      var fullResult = new TransformResult['default']();\n      var queue = new ActionQueue['default']({autoProcess: false});\n      var operation;\n      var method;\n      var action;\n\n      for (var i = 0, len = ops.length; i < len; i++) {\n        operation = ops[i];\n\n        if (action && this._mergeOperationWithAction(action, operation)) {\n          // Operation merged with previous action.\n        } else {\n          // Not able to merge operation with previous action, so we need to\n          // queue a new action.\n          method = this._operationMethod(operation);\n          action = this._createTransformAction(method, operation, fullResult);\n          queue.push(action);\n        }\n      }\n\n      return queue.process().then(function() {\n        return fullResult;\n      });\n    },\n\n    /////////////////////////////////////////////////////////////////////////////\n    // Requestable interface implementation\n    /////////////////////////////////////////////////////////////////////////////\n\n    _find: function(type, id, options) {\n      if (options) throw new exceptions.Exception('`JSONAPISource#findLink` does not support `options` argument');\n\n      if (objects.isNone(id)) {\n        return this._findAll(type);\n\n      } else if (objects.isArray(id)) {\n        return this._findMany(type, id);\n\n      } else {\n        return this._findOne(type, id);\n      }\n    },\n\n    _findLink: function(type, id, link, options) {\n      var _this = this;\n\n      if (options) throw new exceptions.Exception('`JSONAPISource#findLink` does not support `options` argument');\n\n      id = this.getId(type, id);\n\n      return this.ajax(this.resourceLinkURL(type, id, link), 'GET').then(\n        function(raw) {\n          var relId = _this.serializer.deserializeLink(raw.data);\n          return relId;\n        }\n      );\n    },\n\n   _findLinked: function(type, id, link, options) {\n     var _this = this;\n\n     if (options) throw new exceptions.Exception('`JSONAPISource#findLinked` does not support `options` argument');\n\n     id = this.getId(type, id);\n\n     return this.ajax(this.resourceLinkedURL(type, id, link), 'GET').then(\n       function(raw) {\n         var linkDef = _this.schema.linkDefinition(type, link);\n\n         var result = _this.deserialize(linkDef.model, null, raw);\n\n         return _this.transformed(result.result).then(function() {\n           return result.data;\n         });\n       }\n     );\n   },\n\n   _query: function(type, query, options) {\n     var _this = this;\n\n     if (options) throw new exceptions.Exception('`JSONAPISource#query` does not support `options` argument');\n\n     return this.ajax(this.resourceURL(type), 'GET', {data: {filter: query}}).then(\n       function(raw) {\n         var deserialized = _this.deserialize(type, null, raw);\n         return _this.transformed(deserialized.result).then(function() {\n           return deserialized.data;\n         });\n       }\n     );\n   },\n\n    /////////////////////////////////////////////////////////////////////////////\n    // Internals\n    /////////////////////////////////////////////////////////////////////////////\n\n    _transformAdd: function(operation) {\n      var _this = this;\n      var type = operation.path[0];\n      var id = operation.path[1];\n      var json = this.serializer.serialize(type, operation.value);\n\n      return this.ajax(this.resourceURL(type), 'POST', {data: json}).then(\n        function(raw) {\n          var result = _this._transformCache(operation);\n\n          var deserialized = _this.deserialize(type, id, raw);\n          if (!deserialized.result.isEmpty()) {\n            _this.transformed(deserialized.result);\n          }\n\n          return result;\n        }\n      );\n    },\n\n    _transformReplace: function(ops) {\n      ops = objects.toArray(ops);\n\n      var _this = this;\n      var type = ops[0].path[0];\n      var id = ops[0].path[1];\n      var modelDef = this.schema.modelDefinition(type);\n\n      var record = {};\n\n      ops.forEach(function(operation) {\n        var path = operation.path;\n        var value = operation.value;\n        if (path[2]) {\n          if (path[2] === '__rel') {\n            record.__rel = record.__rel || {};\n            record.__rel[path[3]] = value;\n          } else {\n            record[path[2]] = value;\n          }\n        } else {\n          record = objects.merge(record, value);\n        }\n      });\n\n      record[modelDef.primaryKey.name] = id;\n\n      var json = this.serializer.serialize(type, record);\n\n      return this.ajax(this.resourceURL(type, id), 'PATCH', {data: json}).then(\n        function(raw) {\n          var result = _this._transformCache(ops);\n\n          // TODO - better 204 (no content) checking\n          if (raw && Object.keys(raw).length > 0) {\n            var deserialized = _this.deserialize(type, id, raw);\n            if (!deserialized.result.isEmpty()) {\n              _this.transformed(deserialized.result);\n            }\n          }\n\n          return result;\n        }\n      );\n    },\n\n    _transformRemove: function(operation) {\n      var _this = this;\n      var type = operation.path[0];\n      var id = operation.path[1];\n\n      return this.ajax(this.resourceURL(type, id), 'DELETE').then(function() {\n        return _this._transformCache({op: 'remove', path: [type, id]});\n      });\n    },\n\n    _transformAddLink: function(operation) {\n      var _this = this;\n\n      var type = operation.path[0];\n      var id = operation.path[1];\n      var link = operation.path[3];\n      var relId = operation.path[4] || operation.value;\n      var relType = this.schema.linkDefinition(type, link).model;\n      var method = 'POST';\n      var json = {\n        data: [this.serializer.serializeRelationshipIdentifier(relType, relId)]\n      };\n\n      return this.ajax(this.resourceLinkURL(type, id, link), method, {data: json}).then(\n        function() {\n          return _this._transformCache(operation);\n        }\n      );\n    },\n\n    _transformRemoveLink: function(operation) {\n      var _this = this;\n\n      var type = operation.path[0];\n      var id = operation.path[1];\n      var link = operation.path[3];\n      var relId = operation.path[4];\n      var relType = this.schema.linkDefinition(type, link).model;\n      var method = 'DELETE';\n      var json = {\n        data: [this.serializer.serializeRelationshipIdentifier(relType, relId)]\n      };\n\n      return this.ajax(this.resourceLinkURL(type, id, link), method, {data: json}).then(\n        function() {\n          return _this._transformCache(operation);\n        }\n      );\n    },\n\n    _transformReplaceLink: function(operation) {\n      var _this = this;\n\n      var type = operation.path[0];\n      var id = operation.path[1];\n      var link = operation.path[3];\n      var relId = operation.path[4] || operation.value;\n      var linkDef = this.schema.linkDefinition(type, link);\n      var relType = linkDef.model;\n      var data;\n\n      if (linkDef.type === 'hasMany') {\n        // Convert a map of ids to an array\n        if (objects.isObject(relId)) {\n          data = Object.keys(relId).map(function(id) {\n            return this.serializer.serializeRelationshipIdentifier(relType, id);\n          }, this);\n        } else {\n          data = [this.serializer.serializeRelationshipIdentifier(relType, relId)];\n        }\n      } else if (relId !== null) {\n        data = this.serializer.serializeRelationshipIdentifier(relType, relId);\n      } else {\n        data = null;\n      }\n\n      var method = 'PATCH';\n      var json = {\n        data: data\n      };\n\n      return this.ajax(this.resourceLinkURL(type, id, link), method, {data: json}).then(\n        function() {\n          return _this._transformCache(operation);\n        }\n      );\n    },\n\n    _transformReplaceAttribute: function(operation) {\n      var _this = this;\n      var type = operation.path[0];\n      var id = operation.path[1];\n      var attr = operation.path[2];\n      var modelDef = this.schema.modelDefinition(type);\n\n      var record = {};\n      record[attr] = operation.value;\n      record[modelDef.primaryKey.name] = id;\n\n      var json = this.serializer.serialize(type, record);\n\n      return this.ajax(this.resourceURL(type, id), 'PATCH', {data: json}).then(\n        function(raw) {\n          return _this._transformCache(operation);\n        }\n      );\n    },\n\n    _operationMethod: function(operation) {\n      var op = operation.op;\n      var path = operation.path;\n\n      if (path.length > 2) {\n        if (path[2] === '__rel') {\n          if (op === 'add') {\n            return '_transformAddLink';\n          } else if (op === 'remove') {\n            return '_transformRemoveLink';\n          } else if (op === 'replace') {\n            return '_transformReplaceLink';\n          }\n        } else {\n          return '_transformReplaceAttribute';\n        }\n\n      } else if (path.length > 1) {\n        if (op === 'add') {\n          return '_transformAdd';\n\n        } else if (op === 'replace') {\n          return '_transformReplace';\n\n        } else if (op === 'remove') {\n          return '_transformRemove';\n        }\n      }\n    },\n\n    _mergeOperationWithAction: function(action, operation) {\n      var actionOperation = objects.toArray(action.data.operation)[0];\n\n      // Merge replace operations with previous replace operations that update\n      // the same record.\n      if (actionOperation.op === 'replace' && operation.op === 'replace' &&\n          actionOperation.path[0] === operation.path[0] &&\n          actionOperation.path[1] === operation.path[1]) {\n\n        action.data.method = '_transformReplace';\n        action.data.operation = objects.toArray( action.data.operation ).concat([operation]);\n\n        return true;\n      }\n    },\n\n    _createTransformAction: function(method, operation, fullResult) {\n      var _this = this;\n\n      return {\n        data: {\n          method: method,\n          operation: operation\n        },\n        process: function() {\n          return _this[this.data.method].call(_this, this.data.operation).then(function(result) {\n            if (result) {\n              fullResult.concat(result);\n            }\n          });\n        }\n      };\n    },\n\n    _findAll: function(type) {\n      var _this = this;\n      return this.ajax(this.resourceURL(type), 'GET').then(\n        function(raw) {\n          var deserialized = _this.deserialize(type, null, raw);\n          return _this.transformed(deserialized.result).then(function() {\n            return deserialized.data;\n          });\n        }\n      );\n    },\n\n    _findOne: function(type, id) {\n      var _this = this;\n      return this.ajax(this.resourceURL(type, id), 'GET').then(\n        function(raw) {\n          var deserialized = _this.deserialize(type, null, raw);\n          return _this.transformed(deserialized.result).then(function() {\n            return deserialized.data;\n          });\n        }\n      );\n    },\n\n    _findMany: function(type, ids) {\n      var _this = this;\n      return this.ajax(this.resourceURL(type, ids), 'GET').then(\n        function(raw) {\n          var deserialized = _this.deserialize(type, null, raw);\n          return _this.transformed(deserialized.result).then(function() {\n            return deserialized.data;\n          });\n        }\n      );\n    },\n\n    _addRecordsToCache: function(type, records) {\n      var result = new TransformResult['default']();\n\n      records.forEach(function(record) {\n        result.concat(this._addRecordToCache(type, record));\n      }, this);\n\n      return result;\n    },\n\n    _addRecordToCache: function(type, record) {\n      var operation = {\n        op: 'add',\n        path: [type, this.getId(type, record)],\n        value: record\n      };\n\n      return this._transformCache(operation);\n    },\n\n    _transformCache: function(ops) {\n      if (this._cache) {\n        return this._cache.transform( objects.toArray(ops) );\n      } else {\n        return new TransformResult['default'](ops);\n      }\n    },\n\n    _resourceIdURLSegment: function(type, id) {\n      var resourceId = this.serializer.resourceId(type, id);\n      if (objects.isArray(resourceId)) {\n        resourceId = resourceId.join(',');\n      }\n      return resourceId;\n    },\n\n    /////////////////////////////////////////////////////////////////////////////\n    // Publicly accessible methods particular to JSONAPISource\n    /////////////////////////////////////////////////////////////////////////////\n\n    ajax: function(url, method, hash) {\n      var _this = this;\n\n      return new Orbit['default'].Promise(function(resolve, reject) {\n        hash = hash || {};\n        hash.url = url;\n        hash.type = method;\n        hash.dataType = 'json';\n        hash.context = _this;\n\n        // console.log('ajax start', method, url);\n\n        if (hash.data && method !== 'GET') {\n          if (!hash.contentType) {\n            hash.contentType = _this.ajaxContentType(hash);\n          }\n          hash.data = JSON.stringify(hash.data);\n        }\n\n        if (_this.ajaxHeaders) {\n          var headers = _this.ajaxHeaders();\n          hash.beforeSend = function (xhr) {\n            for (var key in headers) {\n              if (headers.hasOwnProperty(key)) {\n                xhr.setRequestHeader(key, headers[key]);\n              }\n            }\n          };\n        }\n\n        hash.success = function(json) {\n          // console.log('ajax success', method, json);\n          resolve(json);\n        };\n\n        hash.error = function(jqXHR, textStatus, errorThrown) {\n          if (jqXHR) {\n            jqXHR.then = null;\n          }\n          // console.log('ajax error', method, jqXHR);\n\n          reject(jqXHR);\n        };\n\n        Orbit['default'].ajax(hash);\n      });\n    },\n\n    ajaxContentType: function(url, method) {\n      return 'application/vnd.api+json; charset=utf-8';\n    },\n\n    ajaxHeaders: function() {\n      return this.headers;\n    },\n\n    resourceNamespace: function(type) {\n      return this.namespace;\n    },\n\n    resourceHost: function(type) {\n      return this.host;\n    },\n\n    resourcePath: function(type, id) {\n      var path = [this.serializer.resourceType(type)];\n      if (id) {\n        path.push(this._resourceIdURLSegment(type, id));\n      }\n      return path.join('/');\n    },\n\n    resourceURL: function(type, id) {\n      var host = this.resourceHost(type),\n          namespace = this.resourceNamespace(type),\n          url = [];\n\n      if (host) { url.push(host); }\n      if (namespace) { url.push(namespace); }\n      url.push(this.resourcePath(type, id));\n\n      url = url.join('/');\n      if (!host) { url = '/' + url; }\n\n      return url;\n    },\n\n    resourceLinkURL: function(type, id, link, relId) {\n      var url = this.resourceURL(type, id);\n      url += '/relationships/' + this.serializer.resourceLink(type, link);\n\n      if (relId) {\n        var linkDef = this.schema.linkDefinition(type, link);\n\n        url += '/' + this._resourceIdURLSegment(linkDef.model, relId);\n      }\n\n      return url;\n    },\n\n    resourceLinkedURL: function(type, id, link) {\n      var url = this.resourceURL(type, id);\n      url += '/' + this.serializer.resourceLink(type, link);\n      return url;\n    },\n\n    deserialize: function(type, id, data) {\n      var records = this.serializer.deserialize(type, id, data);\n      var primaryData = records.primary;\n\n      var result;\n\n      if (objects.isArray(primaryData)) {\n        result = this._addRecordsToCache(type, primaryData);\n      } else {\n        result = this._addRecordToCache(type, primaryData);\n      }\n\n      if (records.included) {\n        Object.keys(records.included).forEach(function(relType) {\n          var relRecords = records.included[relType];\n          result.concat(this._addRecordsToCache(relType, relRecords));\n        }, this);\n      }\n\n      return {\n        result: result,\n        data: primaryData\n      };\n    }\n  });\n\n});","window.OC.JSONAPISource = requireModule(\"orbit-common/jsonapi-source\")[\"default\"];\nwindow.OC.JSONAPISerializer = requireModule(\"orbit-common/jsonapi-serializer\")[\"default\"];\n","})();\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9kBA;AACA;;ACDA;","file":"orbit-common-jsonapi.js"}