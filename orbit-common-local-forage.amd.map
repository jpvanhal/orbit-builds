{"version":3,"sources":["orbit-common/local-forage-source.js"],"sourcesContent":["define('orbit-common/local-forage-source', ['exports', 'orbit/main', 'orbit/lib/assert', 'orbit/lib/functions', 'orbit/lib/objects', 'orbit-common/memory-source'], function (exports, Orbit, assert, functions, objects, MemorySource) {\n\n  'use strict';\n\n  var supportsLocalStorage = function() {\n    try {\n      return 'localStorage' in window && window['localStorage'] !== null;\n    } catch(e) {\n      return false;\n    }\n  };\n\n  /**\n   Source for storing data with local forage (https://github.com/mozilla/localForage)\n\n   @class LocalForageSource\n   @extends MemorySource\n   @namespace OC\n   @param {OC.Schema} schema\n   @param {Object}    [options]\n   @constructor\n   */\n  var LocalForageSource = MemorySource['default'].extend({\n    init: function(options) {\n      assert.assert('Your browser does not support local storage!', supportsLocalStorage()); //needed as final fallback\n      assert.assert('No valid local forage object given', options['localforage'] !== undefined);\n      assert.assert('Local forage requires Orbit.Promise be defined', Orbit['default'].Promise);\n\n      var _this = this;\n\n      this._super.apply(this, arguments);\n\n      options = options || {};\n      this.saveDataCallback = options['saveDataCallback'];\n      this.loadDataCallback = options['loadDataCallback'];\n      this.namespace = options['namespace'] || 'orbit'; // local storage key\n      this._autosave = options['autosave'] !== undefined ? options['autosave'] : true;\n      var autoload = options['autoload'] !== undefined ? options['autoload'] : true;\n      this.localforage = options['localforage'];\n\n      this._isDirty = false;\n\n      this.on('didTransform', functions.debounce(function() {\n        var promise = _this._saveData();\n        if (promise) {\n          promise.then(function() {\n            if (options.saveDataCallback) setTimeout(_this.saveDataCallback, 0);\n          });\n        }\n      }, 200), this);\n\n      if (autoload) this.load().then(function() {\n        if (options.loadDataCallback) setTimeout(options.callback, 0);\n      });\n    },\n\n    load: function() {\n      var _this = this;\n      return new Orbit['default'].Promise(function(resolve, reject) {\n        _this.localforage.getItem(_this.namespace).then(function(storage){\n          if (storage) {\n            _this.reset(Orbit['default'].extend(_this.retrieve(), storage));\n          }\n          resolve();\n        });\n      });\n    },\n\n    enableAutosave: function() {\n      if (!this._autosave) {\n        this._autosave = true;\n        if (this._isDirty) this._saveData();\n      }\n    },\n\n    disableAutosave: function() {\n      if (this._autosave) {\n        this._autosave = false;\n      }\n    },\n\n    /////////////////////////////////////////////////////////////////////////////\n    // Internals\n    /////////////////////////////////////////////////////////////////////////////\n\n    _saveData: function(forceSave) {\n      var _this = this; //bind not supported in older browsers\n      if (!this._autosave && !forceSave) {\n        this._isDirty = true;\n        return;\n      }\n      return this.localforage.setItem(this.namespace, this.retrieve()).then(\n        function() {\n          _this._isDirty = false;\n        }\n      );\n\n    }\n  });\n\n  exports['default'] = LocalForageSource;\n\n});"],"names":[],"mappingsfile":"orbit-common-local-forage.amd.js"}